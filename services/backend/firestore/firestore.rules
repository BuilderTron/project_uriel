rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.role == 'admin';
    }
    
    // Helper function to check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && 
             request.auth.uid == uid;
    }
    
    // Helper function to check if field value is unchanged
    function isUnchanged(field) {
      return (field in resource.data) && 
             (field in request.resource.data) && 
             (resource.data[field] == request.resource.data[field]);
    }
    
    // Helper function to validate required fields exist
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Helper function to validate string length
    function isValidStringLength(field, min, max) {
      return field is string && 
             field.size() >= min && 
             field.size() <= max;
    }
    
    // Helper function to validate email format
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Helper function to check if document status is published
    function isPublished() {
      return resource.data.status == 'published';
    }
    
    // Projects collection - for portfolio showcase
    match /projects/{projectId} {
      // Anyone can read published projects (public portfolio)
      allow read: if isPublished() || isAdmin();
      
      // Only admin can create projects with required fields
      allow create: if isAdmin() && 
                    hasRequiredFields(['title', 'description', 'technologies', 'category', 'status']) &&
                    isValidStringLength(request.resource.data.title, 1, 200) &&
                    isValidStringLength(request.resource.data.description, 1, 1000);
      
      // Only admin can update projects
      allow update: if isAdmin();
      
      // Only admin can delete projects
      allow delete: if isAdmin();
    }
    
    // Experience collection - for professional timeline
    match /experience/{experienceId} {
      // Anyone can read visible experience entries
      allow read: if resource.data.visible == true || isAdmin();
      
      // Only admin can create experience with required fields
      allow create: if isAdmin() && 
                    hasRequiredFields(['title', 'company', 'type', 'description', 'startDate']) &&
                    isValidStringLength(request.resource.data.title, 1, 200) &&
                    isValidStringLength(request.resource.data.company, 1, 200);
      
      // Only admin can update/delete experience
      allow update, delete: if isAdmin();
    }
    
    // Blog posts collection
    match /blog/{postId} {
      // Anyone can read published blog posts
      allow read: if isPublished() || isAdmin();
      
      // Only admin can create blog posts with required fields
      allow create: if isAdmin() && 
                    hasRequiredFields(['title', 'slug', 'content', 'status', 'author']) &&
                    isValidStringLength(request.resource.data.title, 1, 200) &&
                    isValidStringLength(request.resource.data.slug, 1, 200) &&
                    isValidStringLength(request.resource.data.content, 1, 50000);
      
      // Only admin can update/delete blog posts
      allow update, delete: if isAdmin();
      
      // Comments subcollection
      match /comments/{commentId} {
        // Anyone can read approved comments on published posts
        allow read: if resource.data.approved == true || isAdmin();
        
        // Authenticated users can create comments with validation
        allow create: if isAuthenticated() && 
                      hasRequiredFields(['content', 'author', 'postId']) &&
                      isValidStringLength(request.resource.data.content, 1, 2000) &&
                      isValidEmail(request.resource.data.author.email) &&
                      request.resource.data.postId == postId &&
                      request.resource.data.createdAt == request.time;
        
        // Users can edit their own comments, admin can edit any
        allow update: if (isAuthenticated() && 
                         request.resource.data.author.id == request.auth.uid) || 
                         isAdmin();
        
        // Users can delete their own comments, admin can delete any
        allow delete: if (isAuthenticated() && 
                         resource.data.author.id == request.auth.uid) || 
                         isAdmin();
      }
    }
    
    // Contact messages collection
    match /messages/{messageId} {
      // Only admin can read messages
      allow read: if isAdmin();
      
      // Anyone can create contact messages with validation
      allow create: if hasRequiredFields(['name', 'email', 'subject', 'message']) &&
                    isValidStringLength(request.resource.data.name, 1, 100) &&
                    isValidEmail(request.resource.data.email) &&
                    isValidStringLength(request.resource.data.subject, 1, 200) &&
                    isValidStringLength(request.resource.data.message, 1, 5000) &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.status == 'new';
      
      // Only admin can update/delete messages
      allow update, delete: if isAdmin();
    }
    
    // Admin users collection - for user management
    match /admin/users/{userId} {
      // Only admin can read admin user data
      allow read: if isAdmin();
      
      // Only admin can create, update, delete admin users
      allow create, update, delete: if isAdmin();
    }
    
    // Site configuration collection
    match /config/{configId} {
      // Anyone can read public configuration, admin can read all
      allow read: if resource.data.public == true || isAdmin();
      
      // Only admin can create/update/delete configuration
      allow create, update, delete: if isAdmin();
    }
    
    // Analytics collection - for tracking page views, etc.
    match /analytics/{analyticsId} {
      // Only admin can read analytics
      allow read: if isAdmin();
      
      // Anyone can create analytics entries (for tracking)
      allow create: if true;
      
      // Only admin can update/delete analytics
      allow update, delete: if isAdmin();
    }
    
    // User profiles collection
    match /users/{userId} {
      // Users can read their own profile, admin can read any
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile with required fields
      allow create: if isOwner(userId) && 
                    hasRequiredFields(['uid', 'email', 'displayName', 'role']) &&
                    request.resource.data.uid == request.auth.uid &&
                    isValidEmail(request.resource.data.email) &&
                    isValidStringLength(request.resource.data.displayName, 1, 100);
      
      // Users can update their own profile (but not role/uid), admin can update any
      allow update: if (isOwner(userId) && 
                       isUnchanged('uid') && 
                       isUnchanged('role')) || 
                       isAdmin();
      
      // Only admin can delete user profiles
      allow delete: if isAdmin();
    }
  }
}