rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated admin
    function isAdmin() {
      return request.auth != null 
        && request.auth.token.email_verified == true
        && request.auth.token.email.matches('.*@josejlopez\\.com$');
    }
    
    // Helper function to check if user exists in admins collection
    function isVerifiedAdmin() {
      return isAdmin() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Projects collection - public read for published, admin write
    match /projects/{projectId} {
      allow read: if resource.data.isPublished == true || isVerifiedAdmin();
      allow write: if isVerifiedAdmin();
    }
    
    // Resume collection - public read, admin write
    match /resume/{resumeId} {
      allow read: if true;
      allow write: if isVerifiedAdmin();
    }
    
    // Messages collection (contact form) - create allowed, admin read/write
    match /messages/{messageId} {
      allow create: if true; // Anyone can submit contact form
      allow read, update, delete: if isVerifiedAdmin();
    }
    
    // Analytics collection - admin only
    match /analytics/{analyticsId} {
      allow read, write: if isVerifiedAdmin();
      allow create: if true; // Allow anonymous analytics creation
    }
    
    // Settings collection - public read, admin write
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isVerifiedAdmin();
    }
    
    // Admins collection - admin read/write only
    match /admins/{adminId} {
      allow read, write: if isVerifiedAdmin();
      // Allow first admin creation (when no admins exist)
      allow create: if isAdmin() && !exists(/databases/$(database)/documents/admins/$(adminId));
    }
  }
}